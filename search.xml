<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Fluent Python学习笔记（一）</title>
      <link href="/2019/03/20/fluent_python_note/"/>
      <url>/2019/03/20/fluent_python_note/</url>
      <content type="html"><![CDATA[<h3 id="Fluent-Python-第一章学习笔记"><a href="#Fluent-Python-第一章学习笔记" class="headerlink" title="Fluent Python 第一章学习笔记"></a>Fluent Python 第一章学习笔记</h3><p>从Python的数据模型上来理解Python语言，那些内置的数据模型的API为使用最地道的语言特性来构建自己的对象提供了工具。比如说有序列化、迭代器、函数、类和上下文管理器这些接口。<a id="more"></a>Python解释器在遇到特定的句法式使用特殊方法去激活一些基本的对象操作。通常以<code>__</code>开头和结尾、例如<code>__getitem__</code>比如<code>obj[key]</code>实际调用的是<code>__getitem__</code>。对于<code>my_collection[key]</code>解释器实际上会调用<code>my_collection.__getitem__(key)</code>，这些方法称之为双下方法“dunder method”。<br>一个把句子转为单词列表的例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Quote</span>:</span></span><br><span class="line">    quote = <span class="string">"An apple a day keeps the doctor away"</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._quote = [word <span class="keyword">for</span> word <span class="keyword">in</span> self.quote]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self._quote)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, position)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._quote[position]</span><br></pre></td></tr></table></figure></p><p>因为实现了<code>__len__</code>所以可以调用len()获取我们的句子对象的长度。我们在类声明中把<code>__len__</code>的处理转交到了Python原生的数据模型List手上<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(my_quote)</span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure></p><p>在我们的类中同样实现了<code>__getitem__</code>，（也是通过把<code>__getitem__</code>函数的处理转交给了List的<code>__getitem__</code>来处理）这带来了很多好处，可以原生地支持很多Python的操作<br>比如说做切片操作，甚至是利用Python的标准库，而不用重新造轮子，比如随机抽取的操作:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_quote[<span class="number">0</span>]</span><br><span class="line"><span class="string">'An'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_quote[<span class="number">4</span>:]</span><br><span class="line">[<span class="string">'keeps'</span>, <span class="string">'the'</span>, <span class="string">'doctor'</span>, <span class="string">'away'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>choice(my_quote)</span><br><span class="line"><span class="string">'keeps'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>choice(my_quote)</span><br><span class="line"><span class="string">'the'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>choice(my_quote)</span><br><span class="line"><span class="string">'away'</span></span><br></pre></td></tr></table></figure></p><p>同样的，因为实现了<code>__getitem__</code>，我们的句子同样可以迭代<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> word <span class="keyword">in</span> my_quote: </span><br><span class="line"><span class="meta">... </span>    print(word)</span><br><span class="line"><span class="meta">... </span></span><br><span class="line">An</span><br><span class="line">apple</span><br><span class="line">a</span><br><span class="line">day</span><br><span class="line">keeps</span><br><span class="line">the</span><br><span class="line">doctor</span><br><span class="line">away</span><br></pre></td></tr></table></figure></p><p>虽然我们没有实现<code>__contains__</code>方法，in运算符也会按顺序做一次迭代搜索，像是这样:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'apple'</span> <span class="keyword">in</span> my_quote</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'banana'</span> <span class="keyword">in</span> my_quote</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><p>也可以对句子中的单词做首字母降序排序<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(my_quote)</span><br><span class="line">[<span class="string">'An'</span>, <span class="string">'a'</span>, <span class="string">'apple'</span>, <span class="string">'away'</span>, <span class="string">'day'</span>, <span class="string">'doctor'</span>, <span class="string">'keeps'</span>, <span class="string">'the'</span>]</span><br></pre></td></tr></table></figure></p><p>通过把<code>__len__</code>和<code>__getitem__</code>的具体实现代理给<code>self._quote</code>这个Python List对象使我们的<code>Qoute</code>类就像是Python自由的序列数据雷翔一样，应用Python的核心语言特性也轻而易举，同样适用于标准库中的函数。  </p><p>还有一些其他的Python类特殊方法可以使编程更加优雅，比如对自己创建的向量类<code>Vector</code>做加法、向量乘法、求绝对值、求布尔值以及如何用字符串的形式来表达。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> hypot</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vector</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x=<span class="number">0</span>, y=<span class="number">0</span>)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Vector(%r, %r)'</span> % (self.x, self.y)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__abs__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> hypot(self.x, self.y)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bool__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> bool(abs(self))</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        x = self.x + other.x</span><br><span class="line">        y = self.y + other.y</span><br><span class="line">        <span class="keyword">return</span> Vector(x, y)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__mul__</span><span class="params">(self, scalar)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> Vector(self.x * scalar, self.y * scalar)</span><br></pre></td></tr></table></figure></p><p>对创建的Vector类进行实例化，对两个Vector实例做相加运算，调用<code>abs(v2)</code>计算向量的模等。可以发现Vector类的字符串表达也被定义了，在调用以字符串的形式表达时能正确的输出<code>&#39;Vector(%r, %r)&#39; % (self.x, self.y)</code>这样的形式。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>v1 = Vector(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v2 = Vector(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v1 + v2</span><br><span class="line">Vector(<span class="number">4</span>, <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>abs(v2)</span><br><span class="line"><span class="number">5.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>v1 * <span class="number">3</span></span><br><span class="line">Vector(<span class="number">3</span>, <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bool(v1)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><p><a href="https://docs.python.org/3/reference/datamodel.html" target="_blank" rel="noopener">参考Python语言手册中的Data Model</a>总结Python中的特殊方法，共83个特殊方法的名字，其中47个用于实现算术运算、位运算和比较操作:  </p><table><thead><tr><th>类别</th><th>方法名</th></tr></thead><tbody><tr><td>字符串/字节序列表示形式</td><td><strong>repr</strong>、<strong>str</strong>、<strong>format</strong>、<strong>bytes</strong></td></tr><tr><td>数值转换</td><td><strong>abs</strong>、<strong>bool</strong>、<strong>complex</strong>、<strong>int</strong>、<strong>float</strong>、<strong>hash</strong>、<strong>index</strong></td></tr><tr><td>集合模拟</td><td><strong>len</strong>、<strong>getitem</strong>、<strong>setitem</strong>、<strong>delitem</strong>、<strong>contains</strong></td></tr><tr><td>迭代枚举</td><td><strong>iter</strong>、<strong>reversed</strong>、<strong>next</strong></td></tr><tr><td>可调用模拟</td><td><strong>call</strong></td></tr><tr><td>上下文管理</td><td><strong>enter</strong>、<strong>exit</strong></td></tr><tr><td>实例创建和销毁</td><td><strong>new</strong>、<strong>init</strong>、<strong>del</strong></td></tr><tr><td>属性管理</td><td><strong>getattr</strong>、<strong>getattribute</strong>、<strong>setattr</strong>、<strong>delattr</strong>、<strong>dir</strong></td></tr><tr><td>属性描述符</td><td><strong>get</strong>、<strong>set</strong>、<strong>delete</strong></td></tr><tr><td>跟类相关的服务</td><td><strong>prepare</strong>、<strong>instancecheck</strong>、<strong>subclasscheck</strong></td></tr></tbody></table><p>跟运算符相关的特殊方法:  </p><table><thead><tr><th>类别</th><th>方法名和对应的运算符</th></tr></thead><tbody><tr><td>一元运算符</td><td><strong>neg</strong> -、<strong>pos</strong> +、<strong>abs</strong> abs()</td></tr><tr><td>众多比较运算符</td><td><strong>lt</strong> &lt;、<strong>le</strong> &lt;=、<strong>eq</strong> ==、<strong>ne</strong> !=、<strong>gt</strong> &gt;、<strong>ge</strong> &gt;=</td></tr><tr><td>算术运算符</td><td><strong>add</strong> +、<strong>sub</strong> -、<strong>mul</strong> *、<strong>truediv</strong> /、<strong>floordiv</strong> //、<strong>mod</strong> %、<strong>divmod</strong> divmod()、<strong>pow</strong> ** 或pow()、<strong>round</strong> round()</td></tr><tr><td>反向运算运算符</td><td><strong>radd</strong>、<strong>rsub</strong>、<strong>rmul</strong>、<strong>rtruediv</strong>、<strong>rfloordiv</strong>、<strong>rmod</strong>、<strong>rdivmod</strong>、<strong>rpow</strong></td></tr><tr><td>增量赋值算术运算符</td><td><strong>iadd</strong>、<strong>isub</strong>、<strong>imul</strong>、<strong>itruediv</strong>、<strong>ifloordiv</strong>、<strong>imod</strong>、__ipow</td></tr><tr><td>位运算符</td><td><strong>invert</strong> ~、<strong>lshift</strong> &lt;&lt;、<strong>rshift</strong> &gt;&gt;、<strong>and</strong> &amp;、<strong>or</strong></td><td>、<strong>xor</strong> ^</td></tr><tr><td>反向位运算符</td><td><strong>rlshift</strong>、<strong>rrshift</strong>、<strong>rand</strong>、<strong>rxor</strong>、<strong>ror</strong></td></tr><tr><td>增量赋值位运算符</td><td><strong>ilshift</strong>、<strong>irshift</strong>、<strong>iand</strong>、<strong>ixor</strong>、<strong>ior</strong></td></tr></tbody></table>]]></content>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>博客施工中---</title>
      <link href="/2019/03/18/construction/"/>
      <url>/2019/03/18/construction/</url>
      <content type="html"><![CDATA[<!-- ![under_construction](https://github.com/magiczjp123/my_blog/raw/master/construction/under_construction.jpg) --><p><img src="https://github.com/magiczjp123/my_blog_imgs/raw/master/construction/under_construction.jpg" width="400" hegiht="240" align="center"><br><a id="more"></a><br>博客施工中—</p>]]></content>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记录工作</title>
      <link href="/2018/08/08/related/"/>
      <url>/2018/08/08/related/</url>
      <content type="html"><![CDATA[<p>吉迈机器人资料汇总<br><a href="http://www.boocax.com/col.jsp?id=104" title="资料" target="_blank" rel="noopener">北京布科思技术支持资料网站</a><br><a id="more"></a></p><h2 id="机器人流程化配置方法（分步）"><a href="#机器人流程化配置方法（分步）" class="headerlink" title="机器人流程化配置方法（分步）"></a>机器人流程化配置方法（分步）</h2><h3 id="配置网络"><a href="#配置网络" class="headerlink" title="配置网络"></a><strong>配置网络</strong></h3><h4 id="布科思的主机出厂配置默认连接的WIFI网络是："><a href="#布科思的主机出厂配置默认连接的WIFI网络是：" class="headerlink" title="布科思的主机出厂配置默认连接的WIFI网络是："></a>布科思的主机出厂配置默认连接的WIFI网络是：</h4><blockquote><p>网络名称：robot_test<br>网络密码：robot123</p></blockquote><h4 id="在有这样设置的WIFI无线路由器的情况下会自动连接。如果需要设置成自动连接其他的WIFI网络，可以通过两种方法："><a href="#在有这样设置的WIFI无线路由器的情况下会自动连接。如果需要设置成自动连接其他的WIFI网络，可以通过两种方法：" class="headerlink" title="在有这样设置的WIFI无线路由器的情况下会自动连接。如果需要设置成自动连接其他的WIFI网络，可以通过两种方法："></a>在有这样设置的WIFI无线路由器的情况下会自动连接。<strong><em>如果需要设置成自动连接其他的WIFI网络</em></strong>，可以通过两种方法：</h4><ol><li><p>通过ssh远程登录布科思主机修改，注意必须确保和布科思主机在同一个WIFI网络下。ssh命令   </p><p> <code>ssh boocax@</code><del><code>192.168.1.144</code></del><br> <code>boocax@</code><del><code>192.168.1.144</code></del><code>&#39;s password:</code></p><p> 替换划掉的部分为实际的局域网内布科思主机地址。主机地址可以通过window客户端或者其他形式接收局域网内的UDP广播解析得到。ssh远程登录密码为<code>robot123</code>，这也是布科思主机的<code>root</code>密码。<br> 登录布科思主机后可以修改位于主目录下<code>data</code>目录的<code>wlan.conf</code>文件 </p><p> <code>boocax@boocax-robot:~$ sudo nano data/wlan.conf</code>   </p><p> 把<code>ssid</code>和<code>password</code>分别改为其他的网络名称和WIFI密码    </p><p> <code>ssid=(网路名称)</code><br> <code>password=(WIFI密码)</code>      </p><p> 设置完WIFI后重启布科思就会自动连接新网络</p></li><li><p>用VGA视频传输线连接主机VGA输出到电脑屏幕。修改<code>wlan.conf</code>的方法同上。</p></li></ol><h3 id="加载消毒程序"><a href="#加载消毒程序" class="headerlink" title="加载消毒程序"></a><strong>加载消毒程序</strong></h3><h4 id="在布科思主机上需要新增额外的消毒程序ROS包。分下面几步："><a href="#在布科思主机上需要新增额外的消毒程序ROS包。分下面几步：" class="headerlink" title="在布科思主机上需要新增额外的消毒程序ROS包。分下面几步："></a>在布科思主机上需要新增额外的消毒程序ROS包。分下面几步：</h4><ol><li><p>找到并打开布科思的<code>app.launch</code>文件：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boocax@boocax-robot:~$ sudo nano roswork/src/boocax_base/launch/app.launch</span><br></pre></td></tr></table></figure><p> 在文档中加入以下：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jm launch file  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">"jm_operation"</span> <span class="attr">type</span>=<span class="string">"jm_disinfect.py"</span> <span class="attr">name</span>=<span class="string">"jm_disinfect"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p> 这样布科思主机自启动文件就可以自动打开消毒程序了。</p></li><li><p>复制<code>jm_operation</code>文件夹至<code>roswork</code>下的<code>src</code>文件夹中。</p></li><li><p>重启主机，消毒程序随自启动运行。<code>rosnode list</code>可以看到<code>/jm_disinfect</code>的节点，即为消毒程序。</p></li></ol><h3 id="配置机器人运动参数"><a href="#配置机器人运动参数" class="headerlink" title="配置机器人运动参数"></a><strong>配置机器人运动参数</strong></h3><h4 id="参考布科思支持文档06配置手册"><a href="#参考布科思支持文档06配置手册" class="headerlink" title="参考布科思支持文档06配置手册"></a>参考布科思支持文档06配置手册</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config</span></span><br><span class="line">have_visual = 1</span><br><span class="line"><span class="comment"># server_ip = 192.168.0.37</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># UWB</span></span><br><span class="line">uwb_port = /dev/ttyS3</span><br><span class="line">uwb_baudrate = 9600</span><br><span class="line">uwb_x_pos = 0.0</span><br><span class="line">uwb_y_pos = 0.0</span><br><span class="line"><span class="comment"># uwb_tag = 46 1 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运动底盘</span></span><br><span class="line">base_baudrate = 9600</span><br><span class="line">base_port = /dev/ttyS2</span><br><span class="line">base_link_format = 4</span><br><span class="line"></span><br><span class="line"><span class="comment"># APP</span></span><br><span class="line">send_custom_to_app = 1</span><br><span class="line">send_custom_to_base = 1</span><br><span class="line">app_use_serial = 1</span><br><span class="line">app_baudrate = 9600</span><br><span class="line">app_port = /dev/ttyS0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 里程计</span></span><br><span class="line">have_odom = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 激光</span></span><br><span class="line"><span class="comment"># 激光相对于机器人中心的坐标变换，前三位分别表示 x，y，z 轴的偏移量，单位米，后三位 表示角度变换 roll，pitch，yaw，单位弧度</span></span><br><span class="line">laser_tf = 0.215, 0, 0.30, 0, 0, 0</span><br><span class="line">scan_filtered = 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 机器人轮廓</span></span><br><span class="line"><span class="comment"># 圆形机器人设置robot_radius和pole_distance，非圆形机器人设置footprint</span></span><br><span class="line"><span class="comment">#robot_radius = 0.25</span></span><br><span class="line"><span class="comment">#pole_distance = 0.3</span></span><br><span class="line">footprint = [[0.225,-0.18],[0.225,0.18],[-0.225,0.18],[-0.225,-0.18]]</span><br><span class="line"><span class="comment">#footprint = [[0.265,-0.18],[0.265,0.18],[-0.265,0.18],[-0.265,-0.18]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#feasibility_check_dist = 0.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#轮轴距，轮半径，电机减速比</span></span><br><span class="line">width_wheel = 0.295</span><br><span class="line">radius_wheel = 0.084</span><br><span class="line">reduction_gear_ratio = 0.5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 超声波</span></span><br><span class="line">have_sonar = 0</span><br><span class="line">sonar_fliter = 0</span><br><span class="line">sonar_zero_inver = 2.0</span><br><span class="line"><span class="comment">#sonar data: 安装角度(度数)，安装距离(米)，最小距离(米)，最大距离(米)，视角（度数），朝向角度（度数）</span></span><br><span class="line">sonar3 = 337.5,0.249,0.01,0.45,15,0</span><br><span class="line">sonar1 = 22.5,0.249,0.01,0.45,15,0</span><br><span class="line">sonar2 = 0,0.15,0.01,0.45,15,0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局路径搜索参数设置</span></span><br><span class="line">inflation = 0.4</span><br><span class="line">inflation_weight = 1.5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导航参数，不建议修改</span></span><br><span class="line">map_publish_frequency = 0</span><br><span class="line"><span class="comment">#local_window = 4</span></span><br><span class="line"><span class="comment">#control_frequency = 10</span></span><br><span class="line"><span class="comment">#map_update_frequency = 5</span></span><br><span class="line"><span class="comment">#safe_cmd_dist = 0.15</span></span><br><span class="line"><span class="comment">#search_goal_tolerance = 0.0</span></span><br><span class="line"><span class="comment">#search_path_tolerance = 0.0</span></span><br><span class="line"><span class="comment">#path_search_patience = 0.0</span></span><br><span class="line">allow_cancel_patience = 60</span><br><span class="line">report_cancel_patience = 30</span><br><span class="line"></span><br><span class="line">ui_laser_timer = 2.0</span><br><span class="line">ui_uwb_timer = 0.2</span><br><span class="line">ui_sonar_timer = 0.2</span><br><span class="line"><span class="comment">#auto_poweron_time = 0</span></span><br><span class="line">poweroff_delay_time = 20</span><br></pre></td></tr></table></figure><h2 id="机器人总结"><a href="#机器人总结" class="headerlink" title="机器人总结"></a><strong>机器人总结</strong></h2><h3 id="问题总结："><a href="#问题总结：" class="headerlink" title="问题总结："></a>问题总结：</h3><ol><li>机器人导航使用的深度相机面对墙壁丢帧，影响导航性能</li><li>机器人的相对位置link设置基于运动中心</li><li>导航通过窄道边缘转弯容易擦碰</li><li>导航正前方有障碍物会导航失败</li><li>确认摄像头型号</li></ol>]]></content>
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用hexo部署在Github上部署静态网页总结</title>
      <link href="/2018/08/08/first-post/"/>
      <url>/2018/08/08/first-post/</url>
      <content type="html"><![CDATA[<p> 这篇文章主要记录下使用hexo在Github上部署静态网页的过程<br><a id="more"></a></p><h3 id="第一步、在自己的Github网站上建立新的repo、命名为username-github-io，这样就可以访问这个地址，发现已经是托管于Github的网页了。"><a href="#第一步、在自己的Github网站上建立新的repo、命名为username-github-io，这样就可以访问这个地址，发现已经是托管于Github的网页了。" class="headerlink" title="第一步、在自己的Github网站上建立新的repo、命名为username.github.io，这样就可以访问这个地址，发现已经是托管于Github的网页了。"></a>第一步、在自己的Github网站上建立新的repo、命名为<code>username.github.io</code>，这样就可以访问这个地址，发现已经是托管于Github的网页了。</h3><h3 id="第二步、在本地安装hexo，在网上搜索Ubuntu安装hexo可以发现不少详细的教程："><a href="#第二步、在本地安装hexo，在网上搜索Ubuntu安装hexo可以发现不少详细的教程：" class="headerlink" title="第二步、在本地安装hexo，在网上搜索Ubuntu安装hexo可以发现不少详细的教程："></a>第二步、在本地安装hexo，在网上搜索Ubuntu安装hexo可以发现不少详细的教程：</h3><blockquote><p><a href="https://www.jianshu.com/p/a3ab83dba041" target="_blank" rel="noopener">Ubuntu平台下通过Hexo在Github上搭建博客教程(一)</a><br><a href="http://blog.haoji.me/build-blog-website-by-hexo-github.html?from=xa#xiu-gai-zhu-ti" target="_blank" rel="noopener">使用hexo+github搭建免费个人博客详细教程</a><br><a href="https://gist.github.com/btfak/18938572f5df000ebe06fbd1872e4e39" target="_blank" rel="noopener">How to use Hexo and deploy to GitHub Pages</a></p></blockquote><h3 id="第三步、配置hexo，在Github上部署静态网页需要在本地hexo主目录下的-config-yml文件中配置hexo-deploy建立本地与自己的Github-repo的关联，之后就可以直接命令行部署到Github上了。"><a href="#第三步、配置hexo，在Github上部署静态网页需要在本地hexo主目录下的-config-yml文件中配置hexo-deploy建立本地与自己的Github-repo的关联，之后就可以直接命令行部署到Github上了。" class="headerlink" title="第三步、配置hexo，在Github上部署静态网页需要在本地hexo主目录下的_config.yml文件中配置hexo deploy建立本地与自己的Github repo的关联，之后就可以直接命令行部署到Github上了。"></a>第三步、配置hexo，在Github上部署静态网页需要在本地hexo主目录下的_config.yml文件中配置<code>hexo deploy</code>建立本地与自己的Github repo的关联，之后就可以直接命令行部署到Github上了。</h3><h3 id="第四步、配置hexo-theme，安装好hexo使用hexo-generate生成网页后发现使用的是hexo自带的landscape主题。为了个性化可以在网上寻找由其他人分享的各种各样的主题。在下载的主题的目录下的-config-yml文件里可以配置像是评论系统、搜索、tag、分类等等。"><a href="#第四步、配置hexo-theme，安装好hexo使用hexo-generate生成网页后发现使用的是hexo自带的landscape主题。为了个性化可以在网上寻找由其他人分享的各种各样的主题。在下载的主题的目录下的-config-yml文件里可以配置像是评论系统、搜索、tag、分类等等。" class="headerlink" title="第四步、配置hexo theme，安装好hexo使用hexo generate生成网页后发现使用的是hexo自带的landscape主题。为了个性化可以在网上寻找由其他人分享的各种各样的主题。在下载的主题的目录下的_config.yml文件里可以配置像是评论系统、搜索、tag、分类等等。"></a>第四步、配置hexo theme，安装好hexo使用<code>hexo generate</code>生成网页后发现使用的是hexo自带的landscape主题。为了个性化可以在网上寻找由其他人分享的各种各样的<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题</a>。在下载的主题的目录下的_config.yml文件里可以配置像是评论系统、搜索、tag、分类等等。</h3><h3 id="这个博客使用的是AlynxZhou-github制作的hexo-theme-aria，界面简洁明了。"><a href="#这个博客使用的是AlynxZhou-github制作的hexo-theme-aria，界面简洁明了。" class="headerlink" title="这个博客使用的是AlynxZhou@github制作的hexo-theme-aria，界面简洁明了。"></a>这个博客使用的是AlynxZhou@github制作的<a href="https://github.com/AlynxZhou/hexo-theme-aria/blob/master/README.zh_CN.md" target="_blank" rel="noopener">hexo-theme-aria</a>，界面简洁明了。</h3><h3 id="这篇文章主要是方便自己记录下部署Github博客的过程，hexo是一个很棒的工具，还有很多地方需要学习。"><a href="#这篇文章主要是方便自己记录下部署Github博客的过程，hexo是一个很棒的工具，还有很多地方需要学习。" class="headerlink" title="这篇文章主要是方便自己记录下部署Github博客的过程，hexo是一个很棒的工具，还有很多地方需要学习。"></a>这篇文章主要是方便自己记录下部署Github博客的过程，hexo是一个很棒的工具，还有很多地方需要学习。</h3>]]></content>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title></title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title></title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
